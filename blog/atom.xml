<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">PARMES/blog</title>
  <id>http://parmes.org/blog/atom.xml</id>
  <updated>2018-05-23T00:00:00Z</updated>
  <link href="http://parmes.org" />
  <link href="http://parmes.org/blog/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.8.4">ABlog</generator>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Parmec spring contact</title>
    <id>http://parmes.org/blog/parmec_spring_contact.html</id>
    <updated>2018-05-23T00:00:00Z</updated>
    <published>2018-05-23T00:00:00Z</published>
    <link href="http://parmes.org/blog/parmec_spring_contact.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Parmec includes a simple spring contact modeling capability, where a contact plane on one particle can be paired up
with a contact point on another particle. Both particles can be analytical (need no geometry), while the contact spring
and dashpot curves are user defined. Friction, including sticking and slip, can also be added. An example test of this
capability is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/tests/spring_contact_plane.py&quot;&gt;tests/spring_contact_plane.py&lt;/a&gt;.
Parmec &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-spring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;SPRING command&lt;/span&gt;&lt;/a&gt; is used to define the entire contact interactions (parameters
&lt;em&gt;spring&lt;/em&gt;, &lt;em&gt;dashpot&lt;/em&gt; and &lt;em&gt;friction&lt;/em&gt;). Upon running it generates time history figures &lt;em&gt;tests/spring_contact_plane_{z,f_ff}.png&lt;/em&gt;
and output files viewable with &lt;a class=&quot;reference external&quot; href=&quot;https://www.paraview.org/&quot;&gt;ParaView&lt;/a&gt;. An animation and the figures are included below. (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Parmec spring curve tests</title>
    <id>http://parmes.org/blog/spring_curve_tests.html</id>
    <updated>2018-03-07T00:00:00Z</updated>
    <published>2018-03-07T00:00:00Z</published>
    <link href="http://parmes.org/blog/spring_curve_tests.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Thanks to user feedback, Parmec begins to be smoothed out. An automated spring curve correctness test has now been added
as &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/tests/spring_curve_tests.py&quot;&gt;tests/spring_curve_tests.py&lt;/a&gt;
allowing to generate and run a number of simulations with random spring curves within a stroke-force box [-1, -1, 1, 1].
This test initiates what may become a suite of automated regression tests for Parmec. If &lt;a class=&quot;reference external&quot; href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;
and &lt;a class=&quot;reference external&quot; href=&quot;https://www.imagemagick.org&quot;&gt;imagemagic&lt;/a&gt; are installed, it generates a juxtaposed image, comparing input and output curves.
An example image is included below. (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">UNSPRING and spring state in Parmec</title>
    <id>http://parmes.org/blog/unspring_and_spring_state.html</id>
    <updated>2018-01-15T00:00:00Z</updated>
    <published>2018-01-15T00:00:00Z</published>
    <link href="http://parmes.org/blog/unspring_and_spring_state.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;../parmec/&quot;&gt;PARMEC&lt;/a&gt; includes a capability to model rigid body and &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-spring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;SPRING&lt;/span&gt;&lt;/a&gt; systems.
As a part of it an &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-unspring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;UNSPRING&lt;/span&gt;&lt;/a&gt; command allows to deactivate selected springs
when a total force of a set of “test springs” exceeds a prescribed bound. This facilitates modelling
of simple failure scenarios. Spring states are outputted as scalar fields (in XDMF format) and can be
viewed with &lt;a class=&quot;reference external&quot; href=&quot;http://www.paraview.org&quot;&gt;ParaView&lt;/a&gt; or similar tools. The video clip below is based on &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/tests/unspring.py&quot;&gt;this
example&lt;/a&gt;.  Spring states can be visualized
by selecting the ‘SS’ entity and using “Coor Map Editor” in ParaView to “Interpret Values as Cathegories”
(checkbox at the top of the editor dialog box) and then adding the discrete values used by the ‘SS’ field
(-3.0, -2.0, -1.0, …) as described for the &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-output&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;OUTPUT command&lt;/span&gt;&lt;/a&gt;. Spring states
can also be outputted as &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-history&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;HISTORY&lt;/span&gt;&lt;/a&gt; (as in the example).  (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Solfec POP audit report</title>
    <id>http://parmes.org/blog/pop_audit.html</id>
    <updated>2017-12-12T00:00:00Z</updated>
    <published>2017-12-12T00:00:00Z</published>
    <link href="http://parmes.org/blog/pop_audit.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Solfec has been analysed by &lt;a class=&quot;reference external&quot; href=&quot;https://pop-coe.eu&quot;&gt;POP&lt;/a&gt; experts. The initial audit report is available for download: (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Partially cached time series in Solfec</title>
    <id>http://parmes.org/blog/cached_time_series.html</id>
    <updated>2017-08-01T00:00:00Z</updated>
    <published>2017-08-01T00:00:00Z</published>
    <link href="http://parmes.org/blog/cached_time_series.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Motivated by user feedback a partially cached time series capability has been included into &lt;a class=&quot;reference internal&quot; href=&quot;solfec/index.html#solfec-index&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;SOLFEC&lt;/span&gt;&lt;/a&gt;.
This allows to use many large &lt;a class=&quot;reference internal&quot; href=&quot;solfec/user/times.html#solfec-user-times&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;TIME_SERIES&lt;/span&gt;&lt;/a&gt; objects without running out of
memory. To facilitate that an optional &lt;em&gt;cache&lt;/em&gt; argument has been added – please see the &lt;a class=&quot;reference internal&quot; href=&quot;solfec/user/times.html#solfec-user-times&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;documentation&lt;/span&gt;&lt;/a&gt; and &lt;a class=&quot;reference internal&quot; href=&quot;solfec/examples/time_series.html#solfec-examples-time-series&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;example&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
