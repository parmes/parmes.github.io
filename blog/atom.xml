<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">PARMES/blog</title>
  <id>http://parmes.org/blog/atom.xml</id>
  <updated>2019-01-09T00:00:00Z</updated>
  <link href="http://parmes.org" />
  <link href="http://parmes.org/blog/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.9.2">ABlog</generator>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">SOLFEC_EXPORT command</title>
    <id>http://parmes.org/blog/solfec_export_command.html</id>
    <updated>2019-01-09T00:00:00Z</updated>
    <published>2019-01-09T00:00:00Z</published>
    <link href="http://parmes.org/blog/solfec_export_command.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;In analogy to Solfec’s &lt;a class=&quot;reference internal&quot; href=&quot;solfec/xdmf.html#solfec-xdmf&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;XDMF_EXPORT&lt;/span&gt;&lt;/a&gt; command, a new &lt;a class=&quot;reference internal&quot; href=&quot;solfec/user/results.html#solfec-command-solfec-export&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;SOLFEC_EXPORT&lt;/span&gt;&lt;/a&gt;
command has been added. This allows to save a subset of results into a separate directory and view them using Solfec’s
viewer. Within Solfec sources example &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/parmes/solfec/blob/master/inp/devel/solfec-export.py&quot;&gt;inp/devel/solfec-export.py&lt;/a&gt;
depicts an application of this idea. (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Parmec ball joint and articulated pendulum example</title>
    <id>http://parmes.org/blog/parmec_ball_joint.html</id>
    <updated>2018-07-31T00:00:00Z</updated>
    <published>2018-07-31T00:00:00Z</published>
    <link href="http://parmes.org/blog/parmec_ball_joint.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;PARMEC includes its first algebraic joint – a ball joint – which is realised by nullifying relative velocity
of a coincident point between two particles. &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-ball-joint&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;BALL_JOINT command&lt;/span&gt;&lt;/a&gt; is used to define
a pair of particles and the point. Since joints are realised as algebraic constraints they do not influence the
stable time step. Instead a linear system is solved at every time step. Any number of joints can be added to the system,
although linear dependence should be avoided (QR solver can be used in such case, see the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/Config.mak&quot;&gt;Config.mak&lt;/a&gt;
file). The &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/examples/articulated_pendulum.py&quot;&gt;articulated pendulum example&lt;/a&gt;
demonstrates performance of the ball joint, also in conjunction with the &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-torsion-spring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;torsional spring&lt;/span&gt;&lt;/a&gt;.
The example is summarised below. (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Parmec spherical joint</title>
    <id>http://parmes.org/blog/parmec_spherical_joint.html</id>
    <updated>2018-06-13T00:00:00Z</updated>
    <published>2018-06-13T00:00:00Z</published>
    <link href="http://parmes.org/blog/parmec_spherical_joint.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Torsion spring has now been added to PARMEC, allowing to model angular hinges with rotational limits and spherical joints.
&lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-torsion-spring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;TORSION_SPRING command&lt;/span&gt;&lt;/a&gt; is used to define an angle–torque relationship for three
angles of rotation about user specified local coordinate axes (x–roll, y–pitch, z–yaw). The command includes a cone
constraint which allows to model spherical joints in roll-pitch, roll-yaw, and pitch-yaw planes. Example application application
of this functionality is included as &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/tests/spherical_joint.py&quot;&gt;tests/spherical_joint.py&lt;/a&gt;.
A &lt;a class=&quot;reference external&quot; href=&quot;https://www.paraview.org/&quot;&gt;ParaView&lt;/a&gt; animation generated by this test is included below. (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Parmec spring contact</title>
    <id>http://parmes.org/blog/parmec_spring_contact.html</id>
    <updated>2018-05-23T00:00:00Z</updated>
    <published>2018-05-23T00:00:00Z</published>
    <link href="http://parmes.org/blog/parmec_spring_contact.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Parmec includes a simple spring contact modeling capability, where a contact plane on one particle can be paired up
with a contact point on another particle. Both particles can be analytical (need no geometry), while the contact spring
and dashpot curves are user defined. Friction, including sticking and slip, can also be added. An example test of this
capability is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/tests/spring_contact_plane.py&quot;&gt;tests/spring_contact_plane.py&lt;/a&gt;.
Parmec &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-spring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;SPRING command&lt;/span&gt;&lt;/a&gt; is used to define the entire contact interactions (parameters
&lt;em&gt;spring&lt;/em&gt;, &lt;em&gt;dashpot&lt;/em&gt; and &lt;em&gt;friction&lt;/em&gt;). Upon running it generates time history figures &lt;em&gt;tests/spring_contact_plane_{z,f_ff}.png&lt;/em&gt;
and output files viewable with &lt;a class=&quot;reference external&quot; href=&quot;https://www.paraview.org/&quot;&gt;ParaView&lt;/a&gt;. An animation and the figures are included below. (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Parmec spring curve tests</title>
    <id>http://parmes.org/blog/spring_curve_tests.html</id>
    <updated>2018-03-07T00:00:00Z</updated>
    <published>2018-03-07T00:00:00Z</published>
    <link href="http://parmes.org/blog/spring_curve_tests.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Thanks to user feedback, Parmec begins to be smoothed out. An automated spring curve correctness test has now been added
as &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/tests/spring_curve_tests.py&quot;&gt;tests/spring_curve_tests.py&lt;/a&gt;
allowing to generate and run a number of simulations with random spring curves within a stroke-force box [-1, -1, 1, 1].
This test initiates what may become a suite of automated regression tests for Parmec. If &lt;a class=&quot;reference external&quot; href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;
and &lt;a class=&quot;reference external&quot; href=&quot;https://www.imagemagick.org&quot;&gt;imagemagic&lt;/a&gt; are installed, it generates a juxtaposed image, comparing input and output curves.
An example image is included below. (…)&lt;/p&gt;
</content>
  </entry>
</feed>
