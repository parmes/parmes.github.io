<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">PARMES/blog</title>
  <id>http://parmes.org/blog/atom.xml</id>
  <updated>2018-01-15T00:00:00Z</updated>
  <link href="http://parmes.org" />
  <link href="http://parmes.org/blog/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.8.4">ABlog</generator>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">UNSPRING and spring state in Parmec</title>
    <id>http://parmes.org/blog/unspring_and_spring_state.html</id>
    <updated>2018-01-15T00:00:00Z</updated>
    <published>2018-01-15T00:00:00Z</published>
    <link href="http://parmes.org/blog/unspring_and_spring_state.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;../parmec/&quot;&gt;PARMEC&lt;/a&gt; includes a capability to model rigid body and &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-spring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;SPRING&lt;/span&gt;&lt;/a&gt; systems.
As a part of it an &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-unspring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;UNSPRING&lt;/span&gt;&lt;/a&gt; command allows to deactivate selected springs
when a total force of a set of “test springs” exceeds a prescribed bound. This facilitates modelling
of simple failure scenarios. Spring states are outputted as scalar fields (in XDMF format) and can be
viewed with &lt;a class=&quot;reference external&quot; href=&quot;http://www.paraview.org&quot;&gt;ParaView&lt;/a&gt; similar tools. The video clip below is based on &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tkoziara/parmec/blob/master/tests/unspring.py&quot;&gt;this
example&lt;/a&gt;.  Spring states can be visualized
by selecting the ‘SS’ entity and using “Coor Map Editor” in ParaView to “Interpret Values as Cathegories”
(a checkbox at the top of the editor dialog box) and then adding the discrete values used by the ‘SS’ field
(-3.0, -2.0, -1.0, …) as described in the &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-output&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;OUTPUT command&lt;/span&gt;&lt;/a&gt;.  Spring states
can also be outputted as &lt;a class=&quot;reference internal&quot; href=&quot;parmec/input_commands.html#parmec-command-history&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;HISTORY&lt;/span&gt;&lt;/a&gt; (as in the example).  (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Solfec POP audit report</title>
    <id>http://parmes.org/blog/pop_audit.html</id>
    <updated>2017-12-12T00:00:00Z</updated>
    <published>2017-12-12T00:00:00Z</published>
    <link href="http://parmes.org/blog/pop_audit.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Solfec has been analysed by &lt;a class=&quot;reference external&quot; href=&quot;https://pop-coe.eu&quot;&gt;POP&lt;/a&gt; experts. The initial audit report is available for download: (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Partially cached time series in Solfec</title>
    <id>http://parmes.org/blog/cached_time_series.html</id>
    <updated>2017-08-01T00:00:00Z</updated>
    <published>2017-08-01T00:00:00Z</published>
    <link href="http://parmes.org/blog/cached_time_series.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;Motivated by user feedback a partially cached time series capability has been included into &lt;a class=&quot;reference internal&quot; href=&quot;solfec/index.html#solfec-index&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;SOLFEC&lt;/span&gt;&lt;/a&gt;.
This allows to use many large &lt;a class=&quot;reference internal&quot; href=&quot;solfec/user/times.html#solfec-user-times&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;TIME_SERIES&lt;/span&gt;&lt;/a&gt; objects without running out of
memory. To facilitate that an optional &lt;em&gt;cache&lt;/em&gt; argument has been added – please see the &lt;a class=&quot;reference internal&quot; href=&quot;solfec/user/times.html#solfec-user-times&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;documentation&lt;/span&gt;&lt;/a&gt; and &lt;a class=&quot;reference internal&quot; href=&quot;solfec/examples/time_series.html#solfec-examples-time-series&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;example&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">TR1: Co-rotated and reduced order time integrators</title>
    <id>http://parmes.org/blog/tr1_post.html</id>
    <updated>2017-05-20T00:00:00Z</updated>
    <published>2017-05-20T00:00:00Z</published>
    <link href="http://parmes.org/blog/tr1_post.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class=&quot;reference internal&quot; href=&quot;trs/index.html#tr1&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;Technical Report 1&lt;/span&gt;&lt;/a&gt; describes a linearly implicit time integration method
combined with a family of finite element formulations: (…)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://parmes.org/blog/atom.xml">
    <title type="text">Hybrid solver in Solfec</title>
    <id>http://parmes.org/blog/hybrid_solver.html</id>
    <updated>2017-04-27T00:00:00Z</updated>
    <published>2017-04-27T00:00:00Z</published>
    <link href="http://parmes.org/blog/hybrid_solver.html" />
    <author>
      <name>Tomek</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class=&quot;reference internal&quot; href=&quot;solfec/user/solvers.html#solfec-command-hybrid-solver&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;Solfec’s hybrid solver&lt;/span&gt;&lt;/a&gt; is now ready for testing. This solver combines the ability
of modeling non–smooth multi–body structures in Solfec (e.g. as fully resolved FE models) in conjunction with a lightweight
rigid–body/nonlinear–spring approach implemented in &lt;a class=&quot;reference internal&quot; href=&quot;parmec/index.html#parmec-index&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;PARMEC&lt;/span&gt;&lt;/a&gt;. A simple example of that can be
seen in the video below:&lt;/p&gt;
</content>
  </entry>
</feed>
